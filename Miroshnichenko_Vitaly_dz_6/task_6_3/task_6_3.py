# 3. Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом — данные об их хобби.
# Известно, что при хранении данных используется принцип:
# одна строка — один пользователь, разделитель между значениями — запятая.
# Написать код, загружающий данные из обоих файлов и формирующий из них словарь:
# ключи — ФИО, значения — данные о хобби. Сохранить словарь в файл.
# Проверить сохранённые данные.
# Если в файле, хранящем данные о хобби, меньше записей, чем в файле с ФИО, задаём в словаре значение None.
# Если наоборот — выходим из скрипта с кодом «1».
# При решении задачи считать, что объём данных в файлах во много раз меньше объема ОЗУ.
# Фрагмент файла с данными о пользователях (users.csv):
# Иванов,Иван,Иванович
# Петров,Петр,Петрович
# Фрагмент файла с данными о хобби (hobby.csv):
# скалолазание,охота
# горные лыжи
# 4. * (вместо 3) Решить задачу 3 для ситуации, когда объём данных в файлах превышает объём ОЗУ
# (разумеется, не нужно реально создавать такие большие файлы, это просто задел на будущее проекта).
# Также реализовать парсинг данных из файлов
# — получить отдельно фамилию, имя и отчество для пользователей и название каждого хобби:
# преобразовать в какой-нибудь контейнерный тип (список, кортеж, множество, словарь).
# Обосновать выбор типа. Подумать, какие могут возникнуть проблемы при парсинге.
# В словаре должны храниться данные, полученные в результате парсинга.
# 5. ** (вместо 4) Решить задачу 4 и реализовать интерфейс командной строки,
# чтобы можно было задать путь к обоим исходным файлам и путь к выходному файлу со словарём.
# Проверить работу скрипта для случая, когда все файлы находятся в разных папках.

import csv

customers_dict = dict()

with open('users.csv', encoding='utf-8') as users, \
        open('hobby.csv', encoding='utf-8') as hobby, \
        open('customers.txt', 'w', encoding='utf-8') as customers:

    users = csv.DictReader(users, delimiter=',')
    hobby = csv.reader(hobby, delimiter=',')
    count_users = 0
    count_hobby = 0

    for row_user in users:
        count_users += 1
        full_name = f'{row_user["Фамилия"]} {row_user["Имя"]} {row_user["Отчество"]}'
        for row_hobby in hobby:
            count_hobby += 1
            if full_name not in customers_dict:
                customers_dict[full_name] = ', '.join(row_hobby)
                break
        if full_name not in customers_dict:
            customers_dict[full_name] = None

    for row_hobby in hobby:
        count_hobby += 1

    try:
        if count_hobby > count_users:
            raise IndexError

        customers.write(str(customers_dict))
    except IndexError:
        exit(1)
